

                         Write a blog on Difference between HTTP1.1 vs HTTP2?

HTTP/1.1:
      For better understanding, letâ€™s assume the situation when you make a request to the server for the geeksforgeeks.
html page & server responds to you as a resource geeksforgeeks.html page. before sending the request and the response 
there is a TCP connection established between client & server. again you make a request to the server for image img.
jpg & the server gives a response as an image img.jpg. the connection was not lost here after the first request because 
we add a keep-alive header which is the part of the request so there is an open connection between the server & client. 
there is a persistent connection which means several requests & responses are merged in a single connection. 
These are the drawbacks that lead to the creation of HTTP/2: The first problem is HTTP/1.1 transfer all the requests & 
responses in the plain text message form. The second one is head of line blocking in which TCP connection is blocked all other 
requests until the response does not receive. all the information related to the header file is repeated in every request.

HTTP/2: 
      HTTP/2 was developed over the SPDY protocol. HTTP/2 works on the binary framing layer instead of textual that converts 
all the messages in binary format. it works on fully multiplexed that is one TCP connection is used for multiple requests. 
HTTP/2 uses HPACK which is used to split data from header. it compresses the header. The server sends all the other files like 
CSS & JS without the request of the client using the PUSH frame.



                        
                         write a blog about objects and its internal representation in javascript?


In JavaScript, an object is a collection of key-value pairs, where each value can be of any data type, including other objects. 
Objects provide a way to encapsulate related data and behaviors into a single entity. They are highly flexible and can be created, 
modified, and accessed dynamically throughout the execution of a program.





Internal Representation of Objects:

                               Internally, JavaScript objects are implemented as unordered collections of properties, where each property 
consists of a name (or key) and a value. Under the hood, objects are stored as hash tables, making property access efficient regardless of 
the number of properties an object.
                               

                               When you create an object, JavaScript allocates memory to store the object and its properties. The properties 
can be primitive values (such as strings, numbers, or booleans) or references to other objects and functions. However, it's important to note 
that JavaScript objects do not have a fixed structure, and properties can be added, modified, or deleted at any time during runtime.


                              Object properties can be accessed using dot notation or square bracket notation. Dot notation is typically used when 
the property name is known during coding.Square bracket notation is useful when accessing properties dynamically using a string.JavaScript enables 
the modification of object properties by assigning new values.New properties can be added to existing objects by assigning values to non-existent properties.


                             JavaScript objects are a fundamental part of the language, offering developers a powerful means of organizing and manipulating data. U
nderstanding the internal representation of objects is essential for effectively working with them, accessing properties, modifying values, and leveraging object methods.









